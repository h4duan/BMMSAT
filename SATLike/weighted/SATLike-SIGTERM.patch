diff -crB code/pms.cpp ../SATLike-SIGTERM/code/pms.cpp
*** code/pms.cpp	2018-06-06 03:52:12.000000000 -0400
--- ../SATLike-SIGTERM/code/pms.cpp	2018-07-06 02:39:10.000000000 -0400
***************
*** 1,11 ****
  #include "basis_pms.h"
  #include "pms.h"
  
  int main(int argc, char* argv[])
  {
  	start_timing();
  	cout<<"c this is satlike solver"<<endl;
! 	Satlike s;
  	vector<int> init_solution;
  	s.build_instance(argv[1]);
  	s.local_search_with_decimation(init_solution,argv[1]);
--- 1,25 ----
  #include "basis_pms.h"
  #include "pms.h"
+ #include <signal.h>
+ 
+ static Satlike s;
+ 
+ /**
+  * give the best answer we can when we receive a signal
+  */
+ void interrupt(int sig)
+ {
+   s.print_best_solution();
+   s.free_memory();
+   exit(10);
+ }
  
  int main(int argc, char* argv[])
  {
  	start_timing();
  	cout<<"c this is satlike solver"<<endl;
! 	//Satlike s;
! 	signal(SIGTERM,interrupt);
  	vector<int> init_solution;
  	s.build_instance(argv[1]);
  	s.local_search_with_decimation(init_solution,argv[1]);
diff -crB code/pms.h ../SATLike-SIGTERM/code/pms.h
*** code/pms.h	2018-06-04 06:24:50.000000000 -0400
--- ../SATLike-SIGTERM/code/pms.h	2018-07-06 02:39:02.000000000 -0400
***************
*** 748,754 ****
  void Satlike::print_best_solution()
  {
  	if (best_soln_feasible==0) return;
!   
       printf("v");
       for (int i=1; i<=num_vars; i++) {
  		printf(" ");
--- 748,755 ----
  void Satlike::print_best_solution()
  {
  	if (best_soln_feasible==0) return;
! 
!      /*
       printf("v");
       for (int i=1; i<=num_vars; i++) {
  		printf(" ");
***************
*** 756,761 ****
--- 757,773 ----
  		printf("%d", i);
       }
       printf("\n");
+      */
+ 
+      std::stringstream s;
+      s << "v";
+ 
+      for (int i=1; i<=num_vars; i++) {
+        s << " ";
+        if(best_soln[i]==0) s << "-";
+        s << i;
+      }
+      printf("%s\n",s.str().c_str());
  }
  
  void Satlike::local_search_with_decimation(vector<int>& init_solution, char* inputfile)
***************
*** 805,814 ****
  					//opt_time = get_runtime(); 
  		        	for(int v=1; v<=num_vars; ++v) best_soln[v] = cur_soln[v];
  		        	
! 		        	if(print1==1 || print2==1)
! 		        	{
! 		        		print_best_solution();
! 		        	}
  		        	
  		        	if(opt_unsat_weight==0)
  		        	{
--- 817,826 ----
  					//opt_time = get_runtime(); 
  		        	for(int v=1; v<=num_vars; ++v) best_soln[v] = cur_soln[v];
  		        	
! 		        	// if(print1==1 || print2==1)
! 		        	// {
! 		        	// 	print_best_solution();
! 		        	// }
  		        	
  		        	if(opt_unsat_weight==0)
  		        	{
***************
*** 837,844 ****
          		if(print1==0 && elapse_time>print_time1 && elapse_time<60)
          		{
          			print1=1;
!         			if(best_soln_feasible==1)
!         				print_best_solution();
          		}
          		
          		if(elapse_time > 60) print1=0;
--- 849,856 ----
          		if(print1==0 && elapse_time>print_time1 && elapse_time<60)
          		{
          			print1=1;
!         			// if(best_soln_feasible==1)
!         			// 	print_best_solution();
          		}
          		
          		if(elapse_time > 60) print1=0;
***************
*** 846,853 ****
          		if(print2==0 && elapse_time>print_time2)
          		{
          			print2=1;
!         			if(best_soln_feasible==1)
!         				print_best_solution();
          		}
          		
              	if(elapse_time>=cutoff_time) {deci.free_memory();return;}
--- 858,865 ----
          		if(print2==0 && elapse_time>print_time2)
          		{
          			print2=1;
!         			// if(best_soln_feasible==1)
!         			// 	print_best_solution();
          		}
          		
              	if(elapse_time>=cutoff_time) {deci.free_memory();return;}
